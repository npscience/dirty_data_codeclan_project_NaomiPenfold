select(sci_name) %>%
distinct()
distinct_lone_bird_types_sa <- bird_counts_clean %>%
filter(count == 1) %>%
select(species_abbreviation) %>%
distinct()
nrow(distinct_lone_bird_types_cn)
nrow(distinct_lone_bird_types_sn)
nrow(distinct_lone_bird_types_sa)
# find all the types of penguins, regardless of sightings
penguins <- bird_counts_clean %>%
filter(str_detect(bird_counts_clean$common_name, "(?i)[P]enguin*") == TRUE) %>%
distinct(common_name)
penguins
# find all the penguins in the dataset, remove the NAs in count to ensure sums count all sightings
penguin_sightings <- bird_counts_clean %>%
filter(str_detect(bird_counts_clean$common_name, "(?i)[P]enguin") == TRUE) %>%
group_by(common_name, sci_name) %>%
summarise(total_sightings = sum(count, na.rm = TRUE)) %>%
arrange(desc(total_sightings))
penguin_sightings
# count the number of types of penguins that were sighted
nrow(penguin_sightings) # all 7 types were sighted
# sum the sightings of all the penguins to find total sightings
penguin_sightings %>%
summarise(total_sightings = sum(total_sightings, na.rm = TRUE))
sum(penguin_sightings$total_sightings, na.rm = TRUE)
# find all the types of penguins, regardless of sightings
penguins <- bird_counts_clean %>%
filter(str_detect(bird_counts_clean$common_name, "(?i)[P]enguin*") == TRUE) %>%
distinct(common_name)
penguins
# find all the penguins in the dataset, remove the NAs in count to ensure sums count all sightings
penguin_sightings <- bird_counts_clean %>%
filter(str_detect(bird_counts_clean$common_name, "(?i)[P]enguin") == TRUE) %>%
group_by(common_name, sci_name) %>%
summarise(total_sightings = sum(count, na.rm = TRUE)) %>%
arrange(desc(total_sightings))
penguin_sightings
# count the number of types of penguins that were sighted
nrow(penguin_sightings) # all 7 types were sighted
# sum the sightings of all the penguins to find total sightings
sum(penguin_sightings$total_sightings, na.rm = TRUE)
# find all the types of penguins by genus names, regardless of sightings
penguins_by_genus <- bird_counts_clean %>%
filter((str_detect(bird_counts_clean$sci_name, "Aptenodytes*|Pygoscelis*|Eudyptula*|Spheniscus*|Megadyptes*|Eudyptes*") == TRUE) | (str_detect(bird_counts_clean$common_name, "Penguin (unidentified)*") == TRUE)) %>%
distinct(sci_name)
penguins_by_genus
# finds 6 different species, plus NA for "Penguin (unidentified)"
# sum count of all sightings (remove NA)
penguin_sightings_by_genus <- bird_counts_clean %>%
filter((str_detect(bird_counts_clean$sci_name, "Aptenodytes*|Pygoscelis*|Eudyptula*|Spheniscus*|Megadyptes*|Eudyptes*") == TRUE) | (str_detect(bird_counts_clean$common_name, "Penguin (unidentified)*") == TRUE)) %>%
group_by(common_name, sci_name, species_abbreviation) %>%
summarise(total_sightings = sum(count, na.rm = TRUE)) %>%
arrange(desc(total_sightings))
penguin_sightings_by_genus
# sum the sightings of all the penguins to find total sightings
sum(penguin_sightings_by_genus$total_sightings, na.rm = TRUE)
# find all the types of penguins by genus names, regardless of sightings
penguins_by_genus <- bird_counts_clean %>%
filter((str_detect(bird_counts_clean$sci_name, "Aptenodytes*|Pygoscelis*|Eudyptula*|Spheniscus*|Megadyptes*|Eudyptes*") == TRUE) | (str_detect(bird_counts_clean$common_name, "Penguin (unidentified)*") == TRUE)) %>%
distinct(sci_name)
penguins_by_genus
# finds 6 different species, plus NA for "Penguin (unidentified)"
# sum count of all sightings (remove NA)
penguin_sightings_by_genus <- bird_counts_clean %>%
filter((str_detect(bird_counts_clean$sci_name, "Aptenodytes*|Pygoscelis*|Eudyptula*|Spheniscus*|Megadyptes*|Eudyptes*") == TRUE) | (str_detect(bird_counts_clean$common_name, "Penguin (unidentified)*") == TRUE)) %>%
group_by(common_name, sci_name, species_abbreviation) %>%
summarise(total_sightings = sum(count, na.rm = TRUE)) %>%
arrange(desc(total_sightings))
penguin_sightings_by_genus
# sum the sightings of all the penguins to find total sightings
sum(penguin_sightings_by_genus$total_sightings, na.rm = TRUE)
# find all the types of penguins, regardless of sightings
penguins <- bird_counts_clean %>%
filter(str_detect(bird_counts_clean$common_name, "(?i)[P]enguin*") == TRUE) %>%
distinct(common_name)
penguins
# find all the penguins in the dataset, remove the NAs in count to ensure sums count all sightings
penguin_sightings <- bird_counts_clean %>%
filter(str_detect(bird_counts_clean$common_name, "(?i)[P]enguin") == TRUE) %>%
group_by(common_name, sci_name) %>%
summarise(total_sightings = sum(count, na.rm = TRUE)) %>%
arrange(desc(total_sightings))
penguin_sightings
# sum the sightings of all the penguins to find total sightings
sum(penguin_sightings$total_sightings, na.rm = TRUE)
bird_counts <- read_csv(here::here("clean_data/bird_counts_raw.csv")) # to check "before cleaning" answers
library(tidyverse)
bird_counts <- read_csv(here::here("clean_data/bird_counts_raw.csv")) # to check "before cleaning" answers
bird_counts_clean <- read_csv(here::here("clean_data/bird_counts_cleaned.csv"))
glimpse(bird_counts_clean)
# Load libraries
library(tidyverse)
library(readxl)
library(janitor)
library(assertr)
# Read in raw files
ship_data <- read_excel("raw_data/seabirds.xls", sheet = "Ship data by record ID")
bird_data <- read_excel("raw_data/seabirds.xls", sheet = "Bird data by record ID")
# Join bird and ship data
bird_counts <-  left_join(bird_data, ship_data, by = "RECORD ID") %>%
# all 49,019 bird observations x many variables
# select required variables only
select(`RECORD ID`, LAT, `Species common name (taxon [AGE / SEX / PLUMAGE PHASE])`, `Species  scientific name (taxon [AGE /SEX /  PLUMAGE PHASE])`, `Species abbreviation`, COUNT) %>%
# rename columns, as per tidy data style
clean_names() %>%
rename(
common_name = species_common_name_taxon_age_sex_plumage_phase,
sci_name = species_scientific_name_taxon_age_sex_plumage_phase
)
bird_counts_clean <- bird_counts # make "clean" version to work with next
# clean str data within bird info columns to remove age, plummage,
# and other unnecessary strings appended after the bird names
bird_counts_clean <- bird_counts_clean %>%
mutate(common_name = str_replace_all(bird_counts_clean$common_name, c(
"\\ AD*" = "",
"\\ JUV*" = "",
"\\ IMM*" = "",
"\\ SUBAD*" = "",
"\\ sensu\\ lato*" = "",
"\\ PL[0-9]*" = "",
"\\ LGHT*" = "",
"\\ DRK*" = ""))) %>%
mutate(sci_name = str_replace_all(bird_counts_clean$sci_name, c(
"\\ AD*" = "",
"\\ JUV*" = "",
"\\ IMM*" = "",
"\\ SUBAD*" = "",
"\\ sensu\\ lato*" = "",
"\\ PL[0-9]*" = "",
"\\ LGHT*" = "",
"\\ DRK*" = ""))) %>%
mutate(species_abbreviation = str_replace_all(bird_counts_clean$species_abbreviation, c(
"\\ AD*" = "",
"\\ JUV*" = "",
"\\ IMM*" = "",
"\\ SUBAD*" = "",
"\\ sensu\\ lato*" = "",
"\\ PL[0-9]*" = "",
"\\ LGHT*" = "",
"\\ DRK*" = "")))
# Note: not yet dealing with M at end (for medium plummage) because too non-specific
# or a random F in one that I saw somewhen through cleaning experimentation
# write subsetted data to new file, note: not yet cleaned data within cols.
write_csv(bird_counts, "clean_data/bird_counts_raw.csv")
# write subsetted & cleaned data to new file
write_csv(bird_counts_clean, "clean_data/bird_counts_cleaned.csv")
# Load libraries
library(tidyverse)
library(readxl)
library(janitor)
library(assertr)
# Read in raw files
ship_data <- read_excel("raw_data/seabirds.xls", sheet = "Ship data by record ID")
bird_data <- read_excel("raw_data/seabirds.xls", sheet = "Bird data by record ID")
# Join bird and ship data
bird_counts <-  left_join(bird_data, ship_data, by = "RECORD ID") %>%
# all 49,019 bird observations x many variables
# select required variables only
select(`RECORD ID`, LAT, `Species common name (taxon [AGE / SEX / PLUMAGE PHASE])`, `Species  scientific name (taxon [AGE /SEX /  PLUMAGE PHASE])`, `Species abbreviation`, COUNT) %>%
# rename columns, as per tidy data style
clean_names() %>%
rename(
common_name = species_common_name_taxon_age_sex_plumage_phase,
sci_name = species_scientific_name_taxon_age_sex_plumage_phase
)
bird_counts_clean <- bird_counts # make "clean" version to work with next
# clean str data within bird info columns to remove age, plummage,
# and other unnecessary strings appended after the bird names
bird_counts_clean <- bird_counts_clean %>%
mutate(common_name = str_replace_all(bird_counts_clean$common_name, c(
"\\ AD*" = "",
"\\ JUV*" = "",
"\\ IMM*" = "",
"\\ SUBAD*" = "",
"\\ sensu\\ lato*" = "",
"\\ PL[0-9]*" = "",
"\\ LGHT*" = "",
"\\ DRK*" = ""))) %>%
mutate(sci_name = str_replace_all(bird_counts_clean$sci_name, c(
"\\ AD*" = "",
"\\ JUV*" = "",
"\\ IMM*" = "",
"\\ SUBAD*" = "",
"\\ sensu\\ lato*" = "",
"\\ PL[0-9]*" = "",
"\\ LGHT*" = "",
"\\ DRK*" = ""))) %>%
mutate(species_abbreviation = str_replace_all(bird_counts_clean$species_abbreviation, c(
"\\ AD*" = "",
"\\ JUV*" = "",
"\\ IMM*" = "",
"\\ SUBAD*" = "",
"\\ sensu\\ lato*" = "",
"\\ PL[0-9]*" = "",
"\\ LGHT*" = "",
"\\ DRK*" = "")))
# Note: not yet dealing with M at end (for medium plummage) because too non-specific
# or a random F in one that I saw somewhen through cleaning experimentation
# write subsetted data to new file, note: not yet cleaned data within cols.
write_csv(bird_counts, "clean_data/bird_counts_raw.csv")
# write subsetted & cleaned data to new file
write_csv(bird_counts_clean, "clean_data/bird_counts_cleaned.csv")
View(bird_counts_clean)
clean <- read_csv("clean_data/bird_counts_cleaned.csv")
raw <- read_csv("raw_data/seabirds.xls")
bird_data
bird_data # raw
cleaned_data <- read_csv("clean_data/bird_counts_cleaned.csv")
cleaned_data
# verify lat is numeric type and in range -90 to + 90
# verify count is numeric type and in range: 1 to 99,999 (since this is how data is meant to be encoded)
cleaned_data %>%
verify(is.numeric(lat) & is.numeric(count)) %>%
verify(lat >= -90 & lat <= 90) %>%
verify(count >=1 & count <= 99999)
# verify lat is numeric type and in range -90 to + 90
# verify count is numeric type and in range: 1 to 99,999 (since this is how data is meant to be encoded)
cleaned_data %>%
verify(is.numeric(lat) & is.numeric(count)) %>%
verify((lat >= -90 & lat <= 90) | is.na(lat)) %>%
verify(count >=1 & count <= 99999)
# verify lat is numeric type and in range -90 to + 90 or is NA
# verify count is numeric type and in range: 1 to 99,999 or is NA
cleaned_data %>%
verify(is.numeric(lat) & is.numeric(count)) %>%
verify((lat >= -90 & lat <= 90) | is.na(lat)) %>%
verify(count >=1 & count <= 99999 | is.na(count))
# Load libraries
library(tidyverse)
library(readxl)
library(janitor)
library(assertr)
# Read in raw files
ship_data <- read_excel("raw_data/seabirds.xls", sheet = "Ship data by record ID")
bird_data <- read_excel("raw_data/seabirds.xls", sheet = "Bird data by record ID")
# Join bird and ship data ----
bird_counts <-  left_join(bird_data, ship_data, by = "RECORD ID") %>%
# all 49,019 bird observations x many variables
# select required variables only
select(`RECORD ID`, LAT, `Species common name (taxon [AGE / SEX / PLUMAGE PHASE])`, `Species  scientific name (taxon [AGE /SEX /  PLUMAGE PHASE])`, `Species abbreviation`, COUNT) %>%
# rename columns, as per tidy data style
clean_names() %>%
rename(
common_name = species_common_name_taxon_age_sex_plumage_phase,
sci_name = species_scientific_name_taxon_age_sex_plumage_phase
)
bird_counts_clean <- bird_counts # make "clean" version to work with next
# clean data ----
# clean str data within bird info columns to remove age, plummage,
# and other unnecessary strings appended after the bird names
bird_counts_clean <- bird_counts_clean %>%
mutate(common_name = str_replace_all(bird_counts_clean$common_name, c(
"\\ AD*" = "",
"\\ JUV*" = "",
"\\ IMM*" = "",
"\\ SUBAD*" = "",
"\\ sensu\\ lato*" = "",
"\\ PL[0-9]*" = "",
"\\ LGHT*" = "",
"\\ DRK*" = ""))) %>%
mutate(sci_name = str_replace_all(bird_counts_clean$sci_name, c(
"\\ AD*" = "",
"\\ JUV*" = "",
"\\ IMM*" = "",
"\\ SUBAD*" = "",
"\\ sensu\\ lato*" = "",
"\\ PL[0-9]*" = "",
"\\ LGHT*" = "",
"\\ DRK*" = ""))) %>%
mutate(species_abbreviation = str_replace_all(bird_counts_clean$species_abbreviation, c(
"\\ AD*" = "",
"\\ JUV*" = "",
"\\ IMM*" = "",
"\\ SUBAD*" = "",
"\\ sensu\\ lato*" = "",
"\\ PL[0-9]*" = "",
"\\ LGHT*" = "",
"\\ DRK*" = "")))
# Note: not yet dealing with M at end (for medium plummage) because too non-specific
# or a random F in one that I saw somewhen through cleaning experimentation
# assert data is valid ----
# verify lat is numeric type and in range -90 to + 90 or is NA
# verify count is numeric type and in range: 1 to 99,999 or is NA
cleaned_data %>%
verify(is.numeric(lat) & is.numeric(count)) %>%
verify((lat >= -90 & lat <= 90)) %>%
verify(count >=1 & count <= 99999 | is.na(count))
# Load libraries
library(tidyverse)
library(readxl)
library(janitor)
library(assertr)
# Read in raw files
ship_data <- read_excel("raw_data/seabirds.xls", sheet = "Ship data by record ID")
bird_data <- read_excel("raw_data/seabirds.xls", sheet = "Bird data by record ID")
# Join bird and ship data ----
bird_counts <-  left_join(bird_data, ship_data, by = "RECORD ID") %>%
# all 49,019 bird observations x many variables
# select required variables only
select(`RECORD ID`, LAT, `Species common name (taxon [AGE / SEX / PLUMAGE PHASE])`, `Species  scientific name (taxon [AGE /SEX /  PLUMAGE PHASE])`, `Species abbreviation`, COUNT) %>%
# rename columns, as per tidy data style
clean_names() %>%
rename(
common_name = species_common_name_taxon_age_sex_plumage_phase,
sci_name = species_scientific_name_taxon_age_sex_plumage_phase
)
bird_counts_clean <- bird_counts # make "clean" version to work with next
# clean data ----
# clean str data within bird info columns to remove age, plummage,
# and other unnecessary strings appended after the bird names
bird_counts_clean <- bird_counts_clean %>%
mutate(common_name = str_replace_all(bird_counts_clean$common_name, c(
"\\ AD*" = "",
"\\ JUV*" = "",
"\\ IMM*" = "",
"\\ SUBAD*" = "",
"\\ sensu\\ lato*" = "",
"\\ PL[0-9]*" = "",
"\\ LGHT*" = "",
"\\ DRK*" = ""))) %>%
mutate(sci_name = str_replace_all(bird_counts_clean$sci_name, c(
"\\ AD*" = "",
"\\ JUV*" = "",
"\\ IMM*" = "",
"\\ SUBAD*" = "",
"\\ sensu\\ lato*" = "",
"\\ PL[0-9]*" = "",
"\\ LGHT*" = "",
"\\ DRK*" = ""))) %>%
mutate(species_abbreviation = str_replace_all(bird_counts_clean$species_abbreviation, c(
"\\ AD*" = "",
"\\ JUV*" = "",
"\\ IMM*" = "",
"\\ SUBAD*" = "",
"\\ sensu\\ lato*" = "",
"\\ PL[0-9]*" = "",
"\\ LGHT*" = "",
"\\ DRK*" = "")))
# Note: not yet dealing with M at end (for medium plummage) because too non-specific
# or a random F in one that I saw somewhen through cleaning experimentation
# assert data is valid ----
# verify lat is numeric type and in range -90 to + 90 or is NA
# verify count is numeric type and in range: 1 to 99,999 or is NA
bird_counts_clean %>%
verify(is.numeric(lat) & is.numeric(count)) %>%
verify((lat >= -90 & lat <= 90)) %>%
verify(count >=1 & count <= 99999 | is.na(count))
# verify lat is numeric type and in range -90 to + 90 or is NA
# verify count is numeric type and in range: 1 to 99,999 or is NA
cleaned_data %>%
verify(is.numeric(lat) & is.numeric(count)) %>%
verify((lat >= -90 & lat <= 90) | is.na(lat)) %>%
verify(count >=1 & count <= 99999 | is.na(count)) %>%
verify(is.character(common_name, sci_name, species_abbreviation))
cleaned_data <- read_csv("clean_data/bird_counts_cleaned.csv")
# verify lat is numeric type and in range -90 to + 90 or is NA
# verify count is numeric type and in range: 1 to 99,999 or is NA
cleaned_data %>%
verify(is.numeric(lat) & is.numeric(count)) %>%
verify((lat >= -90 & lat <= 90) | is.na(lat)) %>%
verify(count >=1 & count <= 99999 | is.na(count)) %>%
verify(is.character(common_name, sci_name, species_abbreviation))
# verify lat is numeric type and in range -90 to + 90 or is NA
# verify count is numeric type and in range: 1 to 99,999 or is NA
cleaned_data %>%
verify(is.numeric(lat) & is.numeric(count)) %>%
verify((lat >= -90 & lat <= 90) | is.na(lat)) %>%
verify(count >=1 & count <= 99999 | is.na(count)) %>%
verify(is.character(common_name)) %>%
verify(is.character(sci_name)) %>%
verify(is.character(species_abbreviation))
cleaned_data %>%
verify(is.numeric(lat) & ((lat >= -90 & lat <= 90) | is.na(lat))) %>%
verify(is.numeric(count) & ((count >=1 & count <= 99999) | is.na(count))) %>%
verify(is.character(common_name)) %>%
verify(is.character(sci_name)) %>%
verify(is.character(species_abbreviation))
# Load libraries
library(tidyverse)
library(readxl)
library(janitor)
library(assertr)
# Read in raw files
ship_data <- read_excel("raw_data/seabirds.xls", sheet = "Ship data by record ID")
bird_data <- read_excel("raw_data/seabirds.xls", sheet = "Bird data by record ID")
# Join bird and ship data ----
bird_counts <-  left_join(bird_data, ship_data, by = "RECORD ID") %>%
# all 49,019 bird observations x many variables
# select required variables only
select(`RECORD ID`, LAT, `Species common name (taxon [AGE / SEX / PLUMAGE PHASE])`, `Species  scientific name (taxon [AGE /SEX /  PLUMAGE PHASE])`, `Species abbreviation`, COUNT) %>%
# rename columns, as per tidy data style
clean_names() %>%
rename(
common_name = species_common_name_taxon_age_sex_plumage_phase,
sci_name = species_scientific_name_taxon_age_sex_plumage_phase
)
bird_counts_clean <- bird_counts # make "clean" version to work with next
# clean data ----
# clean str data within bird info columns to remove age, plummage,
# and other unnecessary strings appended after the bird names
bird_counts_clean <- bird_counts_clean %>%
mutate(common_name = str_replace_all(bird_counts_clean$common_name, c(
"\\ AD*" = "",
"\\ JUV*" = "",
"\\ IMM*" = "",
"\\ SUBAD*" = "",
"\\ sensu\\ lato*" = "",
"\\ PL[0-9]*" = "",
"\\ LGHT*" = "",
"\\ DRK*" = ""))) %>%
mutate(sci_name = str_replace_all(bird_counts_clean$sci_name, c(
"\\ AD*" = "",
"\\ JUV*" = "",
"\\ IMM*" = "",
"\\ SUBAD*" = "",
"\\ sensu\\ lato*" = "",
"\\ PL[0-9]*" = "",
"\\ LGHT*" = "",
"\\ DRK*" = ""))) %>%
mutate(species_abbreviation = str_replace_all(bird_counts_clean$species_abbreviation, c(
"\\ AD*" = "",
"\\ JUV*" = "",
"\\ IMM*" = "",
"\\ SUBAD*" = "",
"\\ sensu\\ lato*" = "",
"\\ PL[0-9]*" = "",
"\\ LGHT*" = "",
"\\ DRK*" = "")))
# Note: not yet dealing with M at end (for medium plummage) because too non-specific
# or a random F in one that I saw somewhen through cleaning experimentation
# assert data is valid ----
# verify lat is numeric type and in range -90 to + 90 or is NA
# verify count is numeric type and in range: 1 to 99,999 or is NA
# assert common_name, sci_name, species_abbreviation are <chr> type
bird_counts_clean %>%
verify(is.numeric(lat) & ((lat >= -90 & lat <= 90) | is.na(lat))) %>%
verify(is.numeric(count) & ((count >=1 & count <= 99999) | is.na(count))) %>%
verify(is.numeric(common_name)) %>%
verify(is.character(sci_name)) %>%
verify(is.character(species_abbreviation))
# Load libraries
library(tidyverse)
library(readxl)
library(janitor)
library(assertr)
# Read in raw files
ship_data <- read_excel("raw_data/seabirds.xls", sheet = "Ship data by record ID")
bird_data <- read_excel("raw_data/seabirds.xls", sheet = "Bird data by record ID")
# Join bird and ship data ----
bird_counts <-  left_join(bird_data, ship_data, by = "RECORD ID") %>%
# all 49,019 bird observations x many variables
# select required variables only
select(`RECORD ID`, LAT, `Species common name (taxon [AGE / SEX / PLUMAGE PHASE])`, `Species  scientific name (taxon [AGE /SEX /  PLUMAGE PHASE])`, `Species abbreviation`, COUNT) %>%
# rename columns, as per tidy data style
clean_names() %>%
rename(
common_name = species_common_name_taxon_age_sex_plumage_phase,
sci_name = species_scientific_name_taxon_age_sex_plumage_phase
)
bird_counts_clean <- bird_counts # make "clean" version to work with next
# clean data ----
# clean str data within bird info columns to remove age, plummage,
# and other unnecessary strings appended after the bird names
bird_counts_clean <- bird_counts_clean %>%
mutate(common_name = str_replace_all(bird_counts_clean$common_name, c(
"\\ AD*" = "",
"\\ JUV*" = "",
"\\ IMM*" = "",
"\\ SUBAD*" = "",
"\\ sensu\\ lato*" = "",
"\\ PL[0-9]*" = "",
"\\ LGHT*" = "",
"\\ DRK*" = ""))) %>%
mutate(sci_name = str_replace_all(bird_counts_clean$sci_name, c(
"\\ AD*" = "",
"\\ JUV*" = "",
"\\ IMM*" = "",
"\\ SUBAD*" = "",
"\\ sensu\\ lato*" = "",
"\\ PL[0-9]*" = "",
"\\ LGHT*" = "",
"\\ DRK*" = ""))) %>%
mutate(species_abbreviation = str_replace_all(bird_counts_clean$species_abbreviation, c(
"\\ AD*" = "",
"\\ JUV*" = "",
"\\ IMM*" = "",
"\\ SUBAD*" = "",
"\\ sensu\\ lato*" = "",
"\\ PL[0-9]*" = "",
"\\ LGHT*" = "",
"\\ DRK*" = "")))
# Note: not yet dealing with M at end (for medium plummage) because too non-specific
# or a random F in one that I saw somewhen through cleaning experimentation
# assert data is valid ----
# verify lat is numeric type and in range -90 to + 90 or is NA
# verify count is numeric type and in range: 1 to 99,999 or is NA
# assert common_name, sci_name, species_abbreviation are <chr> type
bird_counts_clean %>%
verify(is.numeric(lat) & ((lat >= -90 & lat <= 90) | is.na(lat))) %>%
verify(is.numeric(count) & ((count >=1 & count <= 99999) | is.na(count))) %>%
verify(is.character(common_name)) %>%
verify(is.character(sci_name)) %>%
verify(is.character(species_abbreviation))
# if not, script stops and shows assertr error message in console
# with the failures
# write data to new csv ----
# write subsetted data to new file, note: not yet cleaned data within cols.
write_csv(bird_counts, "clean_data/bird_counts_raw.csv")
# write subsetted & cleaned data to new file
write_csv(bird_counts_clean, "clean_data/bird_counts_cleaned.csv")
