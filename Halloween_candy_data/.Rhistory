# load in raw data files
x2015 <- read_excel("raw_data/boing-boing-candy-2015.xlsx", sheet = "Form Responses 1")
x2016 <- read_excel("raw_data/boing-boing-candy-2016.xlsx", sheet = "Form Responses 1")
x2017 <- read_excel("raw_data/boing-boing-candy-2017.xlsx", sheet = "responses (2) (1).csv")
# 2015 data: subset and make long format
## step 1: subset to remove unwanted columns
x2015_subset <- x2015 %>%
select(1:17,19:22,24,25,29:32,35:37,39:40,42:44,
46:55,57:81,83:89,91,92,96,114,115) #,98,99)
# include 98,99 if using additional ratings
## step 2: clean up included variables to produce required common df structure:
### [1]id [2]year [3]age [4]gender [5]country
### [6]goes_trick_or_treating [7]candy_item [8]rating
x2015_subset_converted_all <- x2015_subset %>%
# make an id column to retain unique identifier for each person
mutate(id = c(1:5630), .before = "Timestamp") %>%
# rename variables
rename(age = "How old are you?",
goes_trick_or_treating = "Are you going actually going trick or treating yourself?",
year = "Timestamp",
additional_joy = "Please list any items not included above that give you JOY.",
additional_despair = "Please list any items not included above that give you DESPAIR.") %>%
# recode some specific age values before converting to numeric (see "Coerced age data" below)
mutate(age = case_when(
id == 378 ~ "45",
id == 792 ~ "37",
id == 1210 ~ "43",
id == 1571 ~ "46",
id == 1629 ~ "40",
id == 2207 ~ "37",
id == 2934 ~ "50",
id == 3384 ~ "27",
id == 3626 ~ "50",
id == 4798 ~ "42",
id == 5624 ~ "50",
.default = age)) %>%
# change format of age and year data
mutate(age = as.integer(age), # Note: this introduces NAs by coercion
year = as.numeric(format(year, "%Y"))) %>%
# make empty columns for gender and country (missing in this year's dataset)
mutate(gender = rep(NA_character_, nrow(x2015_subset)), .after = age) %>%
mutate(country = rep(NA_character_, nrow(x2015_subset)), .after = gender)
# Script to clean raw data (excel spreadsheets) from 2015, 2016, 2017
# required libraries
library(tidyverse)
library(readxl)
library(janitor)
# load in raw data files
x2015 <- read_excel("raw_data/boing-boing-candy-2015.xlsx", sheet = "Form Responses 1")
x2016 <- read_excel("raw_data/boing-boing-candy-2016.xlsx", sheet = "Form Responses 1")
x2017 <- read_excel("raw_data/boing-boing-candy-2017.xlsx", sheet = "responses (2) (1).csv")
# 2015 data: subset and make long format
## step 1: subset to remove unwanted columns
x2015_subset <- x2015 %>%
select(1:17,19:22,24,25,29:32,35:37,39:40,42:44,
46:55,57:81,83:89,91,92,96,114,115) #,98,99)
# include 98,99 if retaining additional ratings information
## step 2: clean up included variables to produce required common df structure:
### [1]id [2]year [3]age [4]gender [5]country
### [6]goes_trick_or_treating [7]candy_item [8]rating
x2015_subset_converted_all <- x2015_subset %>%
# make an id column to retain unique identifier for each person
mutate(id = c(1:5630), .before = "Timestamp") %>%
# rename variables
rename(age = "How old are you?",
goes_trick_or_treating = "Are you going actually going trick or treating yourself?",
year = "Timestamp") %>% #,
# additional_joy = "Please list any items not included above that give you JOY.",
# additional_despair = "Please list any items not included above that give you DESPAIR.") %>%
# include additional_y renaming if retaining additional ratings information
# recode some specific age values before converting to numeric (see "Coerced age data" below)
mutate(age = case_when(
id == 378 ~ "45",
id == 792 ~ "37",
id == 1210 ~ "43",
id == 1571 ~ "46",
id == 1629 ~ "40",
id == 2207 ~ "37",
id == 2934 ~ "50",
id == 3384 ~ "27",
id == 3626 ~ "50",
id == 4798 ~ "42",
id == 5624 ~ "50",
.default = age)) %>%
# change format of age and year data
mutate(age = as.integer(age), # Note: this introduces NAs by coercion
year = as.numeric(format(year, "%Y"))) %>%
# make empty columns for gender and country (missing in this year's dataset)
mutate(gender = rep(NA_character_, nrow(x2015_subset)), .after = age) %>%
mutate(country = rep(NA_character_, nrow(x2015_subset)), .after = gender)
# expect dim:
# Notes:
## 1. mutate(goes_trick_or_treating = as.logical(goes_trick_or_treating))
### coerces to NA, so need different approach to make T/F - not done yet
## 2. if processing additional_joy/despair ratings, keep in columns 98,99
### in subsetting step, and process the additional ratings at this point
###  in script, using df `x2015_subset_converted_all`
x2015_subset_converted_all
# Script to clean raw data (excel spreadsheets) from 2015, 2016, 2017
# required libraries
library(tidyverse)
library(readxl)
library(janitor)
# load in raw data files
x2015 <- read_excel("raw_data/boing-boing-candy-2015.xlsx", sheet = "Form Responses 1")
x2016 <- read_excel("raw_data/boing-boing-candy-2016.xlsx", sheet = "Form Responses 1")
x2017 <- read_excel("raw_data/boing-boing-candy-2017.xlsx", sheet = "responses (2) (1).csv")
# 2015 data: subset and make long format
## step 1: subset to remove unwanted columns
x2015_subset <- x2015 %>%
select(1:17,19:22,24,25,29:32,35:37,39:40,42:44,
46:55,57:81,83:89,91,92,96,114,115) #,98,99)
# include 98,99 if retaining additional ratings information
## step 2: clean up included variables to produce required common df structure:
### [1]id [2]year [3]age [4]gender [5]country
### [6]goes_trick_or_treating [7]candy_item [8]rating
x2015_subset_converted <- x2015_subset %>%
# make an id column to retain unique identifier for each person
mutate(id = c(1:5630), .before = "Timestamp") %>%
# rename variables
rename(age = "How old are you?",
goes_trick_or_treating = "Are you going actually going trick or treating yourself?",
year = "Timestamp") %>% #,
# additional_joy = "Please list any items not included above that give you JOY.",
# additional_despair = "Please list any items not included above that give you DESPAIR.") %>%
# include additional_y renaming if retaining additional ratings information
# recode some specific age values before converting to numeric (see "Coerced age data" below)
mutate(age = case_when(
id == 378 ~ "45",
id == 792 ~ "37",
id == 1210 ~ "43",
id == 1571 ~ "46",
id == 1629 ~ "40",
id == 2207 ~ "37",
id == 2934 ~ "50",
id == 3384 ~ "27",
id == 3626 ~ "50",
id == 4798 ~ "42",
id == 5624 ~ "50",
.default = age)) %>%
# change format of age and year data
mutate(age = as.integer(age), # Note: this introduces NAs by coercion
year = as.numeric(format(year, "%Y"))) %>%
# make empty columns for gender and country (missing in this year's dataset)
mutate(gender = rep(NA_character_, nrow(x2015_subset)), .after = age) %>%
mutate(country = rep(NA_character_, nrow(x2015_subset)), .after = gender)
# expect dim: 5630 observations x 85 variables
# cols 1:6 are rater_info, 7-85 are candy items, 85-86
# Notes:
## 1. mutate(goes_trick_or_treating = as.logical(goes_trick_or_treating))
### coerces to NA, so need different approach to make T/F - not done yet
## 2. if processing additional_joy/despair ratings, keep in columns 98,99
### in subsetting step, and process the additional ratings at this point
###  in script, using df `x2015_subset_converted_all`
head(x2015_subset_converted)
x2015_tidy <- x2015_subset_converted %>%
pivot_longer(cols = -c(year, id, age, gender, country, goes_trick_or_treating),
names_to = "candy_item",
values_to = "rating")
dim(x2015_tidy) # 444,770 obs x 8 var - as expected
head(x2015_tidy, n = 20)
tail(x2015_tidy, n = 20)
library(tidyverse)
library(readxl)
library(janitor)
library(here)
excel_sheets(here("raw_data/boing-boing-candy-2015.xlsx"))
excel_sheets(here("raw_data/boing-boing-candy-2016.xlsx"))
excel_sheets(here("raw_data/boing-boing-candy-2017.xlsx"))
x2015 <- read_excel(here("raw_data/boing-boing-candy-2015.xlsx"), sheet = "Form Responses 1")
x2016 <- read_excel(here("raw_data/boing-boing-candy-2016.xlsx"), sheet = "Form Responses 1")
x2017 <- read_excel(here("raw_data/boing-boing-candy-2017.xlsx"), sheet = "responses (2) (1).csv")
ncol(x2015) # 124 columns
colnames(x2015)
glimpse(x2015) # 5630 rows
# data types: mostly <chr>, some <lgl> at end, 1 <dttm> at beginning
x2015_subset <- x2015 %>%
select(1:17,19:22,24,25,29:32,35:37,39:40,42:44,46:55,57:81,83:89,91,92,96,114,115,98,99)
head(x2015_subset) # 84 variables
x2015_subset_converted_all <- x2015_subset %>%
# make an id column to retain unique identifier for each person
mutate(id = c(1:5630), .before = "Timestamp") %>%
filter(!id == 1573) %>% # remove 1 duplicate
# (see "Coerced age data" below for reasoning)
rename(age = "How old are you?",
goes_trick_or_treating = "Are you going actually going trick or treating yourself?",
year = "Timestamp",
additional_joy = "Please list any items not included above that give you JOY.",
additional_despair = "Please list any items not included above that give you DESPAIR.") %>%
# recode some specific age values before converting to numeric (see "Coerced age data" below)
mutate(age = case_when(
id == 378 ~ "45",
id == 792 ~ "37",
id == 1210 ~ "43",
id == 1571 ~ "46",
id == 1629 ~ "40",
id == 2207 ~ "37",
id == 2934 ~ "50",
id == 3384 ~ "27",
id == 3626 ~ "50",
id == 4798 ~ "42",
id == 5624 ~ "50",
.default = age)) %>%
mutate(age = as.integer(age), # Note: this introduces NAs by coercion
year = as.numeric(format(year, "%Y"))) %>%
# make empty columns for gender and country (missing in this year's dataset)
mutate(gender = rep(NA_character_, nrow(x2015_subset)), .after = age) %>%
mutate(country = rep(NA_character_, nrow(x2015_subset)), .after = gender)
x2015_subset_converted_all <- x2015_subset %>%
# make an id column to retain unique identifier for each person
mutate(id = c(1:5630), .before = "Timestamp") %>%
rename(age = "How old are you?",
goes_trick_or_treating = "Are you going actually going trick or treating yourself?",
year = "Timestamp",
additional_joy = "Please list any items not included above that give you JOY.",
additional_despair = "Please list any items not included above that give you DESPAIR.") %>%
# recode some specific age values before converting to numeric (see "Coerced age data" below)
mutate(age = case_when(
id == 378 ~ "45",
id == 792 ~ "37",
id == 1210 ~ "43",
id == 1571 ~ "46",
id == 1629 ~ "40",
id == 2207 ~ "37",
id == 2934 ~ "50",
id == 3384 ~ "27",
id == 3626 ~ "50",
id == 4798 ~ "42",
id == 5624 ~ "50",
.default = age)) %>%
mutate(age = as.integer(age), # Note: this introduces NAs by coercion
year = as.numeric(format(year, "%Y"))) %>%
# make empty columns for gender and country (missing in this year's dataset)
mutate(gender = rep(NA_character_, nrow(x2015_subset)), .after = age) %>%
mutate(country = rep(NA_character_, nrow(x2015_subset)), .after = gender) %>%
filter(!id == 1573) # remove 1 duplicate
# (see "Coerced age data" below for reasoning)
x2015_subset_converted_all %>%
filter(is.na(age))
x2015_subset_converted_sub <- x2015_subset_converted_all %>%
select(-c(additional_joy,additional_despair))
dim(x2015_subset_converted_sub) # 5630 observations x 85 variables
head(x2015_subset_converted_sub)
444770-79
x2015_tidy <- x2015_subset_converted_sub %>%
pivot_longer(cols = -c(year, id, age, gender, country, goes_trick_or_treating),
names_to = "candy_item",
values_to = "rating"
)
dim(x2015_tidy) # 444,770 obs x 8 var - as expected
head(x2015_tidy, n = 20)
tail(x2015_tidy, n = 20)
head(x2015_tidy, n = 10)
tail(x2015_tidy, n = 10)
# Script to clean raw data (excel spreadsheets) from 2015, 2016, 2017
# required libraries
library(tidyverse)
library(readxl)
library(janitor)
# load in raw data files
x2015 <- read_excel("raw_data/boing-boing-candy-2015.xlsx", sheet = "Form Responses 1")
x2016 <- read_excel("raw_data/boing-boing-candy-2016.xlsx", sheet = "Form Responses 1")
x2017 <- read_excel("raw_data/boing-boing-candy-2017.xlsx", sheet = "responses (2) (1).csv")
# 2015 data: subset and make long format
## step 1: subset to remove unwanted columns
x2015_subset <- x2015 %>%
select(1:17,19:22,24,25,29:32,35:37,39:40,42:44,
46:55,57:81,83:89,91,92,96,114,115) #,98,99)
# include 98,99 if retaining additional ratings information
## step 2: clean up included variables to produce required common df structure:
# [1]id [2]year [3]age [4]gender [5]country
# [6]goes_trick_or_treating [7]candy_item [8]rating
x2015_subset_converted <- x2015_subset %>%
# make an id column to retain unique identifier for each person
mutate(id = c(1:5630), .before = "Timestamp") %>%
# rename variables
rename(age = "How old are you?",
goes_trick_or_treating = "Are you going actually going trick or treating yourself?",
year = "Timestamp") %>% #,
# additional_joy = "Please list any items not included above that give you JOY.",
# additional_despair = "Please list any items not included above that give you DESPAIR.") %>%
# include additional_y renaming if retaining additional ratings information
# recode some specific age values before converting to numeric (see "Coerced age data" below)
mutate(age = case_when(
id == 378 ~ "45",
id == 792 ~ "37",
id == 1210 ~ "43",
id == 1571 ~ "46",
id == 1629 ~ "40",
id == 2207 ~ "37",
id == 2934 ~ "50",
id == 3384 ~ "27",
id == 3626 ~ "50",
id == 4798 ~ "42",
id == 5624 ~ "50",
.default = age)) %>%
# change format of age and year data
mutate(age = as.integer(age), # Note: this introduces NAs by coercion
year = as.numeric(format(year, "%Y"))) %>%
# make empty columns for gender and country (missing in this year's dataset)
mutate(gender = rep(NA_character_, nrow(x2015_subset)), .after = age) %>%
mutate(country = rep(NA_character_, nrow(x2015_subset)), .after = gender) %>%
filter(!id == 1573) # remove 1 duplicate
# expect dim: 5629 observations x 85 variables
# cols 1:6 are rater_info, 7-85 are candy items
## Notes:
# 1. mutate(goes_trick_or_treating = as.logical(goes_trick_or_treating))
# coerces to NA, so need different approach to make T/F - not done yet
# 2. if processing additional_joy/despair ratings, keep in columns 98,99
# in subsetting step, and process the additional ratings at this point
# in script, using df `x2015_subset_converted_all`
## step 3: make long format tidy data
# with one column for candy items [7-85], one column for rating
# expect 5629 x 85 df to become
# (5629 raters * 79 items) x 8 = 444,691 x 8
x2015_tidy <- x2015_subset_converted %>%
pivot_longer(cols = -c(year, id, age, gender, country, goes_trick_or_treating),
names_to = "candy_item",
values_to = "rating")
dim(x2015_tidy) # 444,691 obs x 8 var - as expected
head(x2015_tidy, n = 20)
tail(x2015_tidy, n = 20)
# 2016 data: subset and make long format
write_csv("clean_data/tidy_2015.csv")
library(tidyverse)
library(readxl)
library(janitor)
library(here)
excel_sheets(here("raw_data/boing-boing-candy-2015.xlsx"))
excel_sheets(here("raw_data/boing-boing-candy-2016.xlsx"))
excel_sheets(here("raw_data/boing-boing-candy-2017.xlsx"))
x2015 <- read_excel(here("raw_data/boing-boing-candy-2015.xlsx"), sheet = "Form Responses 1")
x2016 <- read_excel(here("raw_data/boing-boing-candy-2016.xlsx"), sheet = "Form Responses 1")
x2017 <- read_excel(here("raw_data/boing-boing-candy-2017.xlsx"), sheet = "responses (2) (1).csv")
write_csv(x2015_tidy, "clean_data/tidy_2015.csv")
library(tidyverse)
library(readxl)
library(janitor)
x2015 <- read_excel("raw_data/boing-boing-candy-2015.xlsx", sheet = "Form Responses 1")
x2016 <- read_excel("raw_data/boing-boing-candy-2016.xlsx", sheet = "Form Responses 1")
x2017 <- read_excel("raw_data/boing-boing-candy-2017.xlsx", sheet = "responses (2) (1).csv")
# Tidy 2015 data ---------
## step 1: subset to remove unwanted columns
x2015_subset <- x2015 %>%
select(1:17,19:22,24,25,29:32,35:37,39:40,42:44,
46:55,57:81,83:89,91,92,96,114,115) #,98,99)
# include 98,99 if retaining additional ratings information
## step 2: clean up included variables to produce required common df structure:
# [1]id [2]year [3]age [4]gender [5]country
# [6]goes_trick_or_treating [7]candy_item [8]rating
x2015_subset_converted <- x2015_subset %>%
# make an id column to retain unique identifier for each person
mutate(id = c(1:5630), .before = "Timestamp") %>%
# rename variables
rename(age = "How old are you?",
goes_trick_or_treating = "Are you going actually going trick or treating yourself?",
year = "Timestamp") %>% #,
# additional_joy = "Please list any items not included above that give you JOY.",
# additional_despair = "Please list any items not included above that give you DESPAIR.") %>%
# include additional_y renaming if retaining additional ratings information
# recode some specific age values before converting to numeric (see "Coerced age data" below)
mutate(age = case_when(
id == 378 ~ "45",
id == 792 ~ "37",
id == 1210 ~ "43",
id == 1571 ~ "46",
id == 1629 ~ "40",
id == 2207 ~ "37",
id == 2934 ~ "50",
id == 3384 ~ "27",
id == 3626 ~ "50",
id == 4798 ~ "42",
id == 5624 ~ "50",
.default = age)) %>%
# change format of age and year data
mutate(age = as.integer(age), # Note: this introduces NAs by coercion
year = as.numeric(format(year, "%Y"))) %>%
# make empty columns for gender and country (missing in this year's dataset)
mutate(gender = rep(NA_character_, nrow(x2015_subset)), .after = age) %>%
mutate(country = rep(NA_character_, nrow(x2015_subset)), .after = gender) %>%
filter(!id == 1573) # remove 1 duplicate
# expect dim: 5629 observations x 85 variables
# cols 1:6 are rater_info, 7-85 are candy items
## Notes:
# 1. mutate(goes_trick_or_treating = as.logical(goes_trick_or_treating))
# coerces to NA, so need different approach to make T/F - not done yet
# 2. if processing additional_joy/despair ratings, keep in columns 98,99
# in subsetting step, and process the additional ratings at this point
# in script, using df `x2015_subset_converted_all`
## step 3: make long format tidy data
# with one column for candy items [7-85], one column for rating
# expect 5629 x 85 df to become
# (5629 raters * 79 items) x 8 = 444,691 x 8
x2015_tidy <- x2015_subset_converted %>%
pivot_longer(cols = -c(year, id, age, gender, country, goes_trick_or_treating),
names_to = "candy_item",
values_to = "rating")
# step 4: write tidied 2015 data to new csv file
write_csv(x2015_tidy, "clean_data/tidy_2015.csv")
tidy_2015 <- read_csv(here("clean_data/tidy_2015.csv"))
head(tidy_2015)
colnames(x2016)
colnames_2016 <- colnames(x2016)
colnames_2016 <- c(colnames(x2016))
colnames_2016 <- as.data.frame(colnames(x2016))
View(colnames_2016)
glimpse(x2016)
x2016_subset <- x2016 %>%
select(1:11,13,14,16:20,23:25,28:30,33:37,39:42,44:48,50:68,
70-78,80-89,91:101,103,106)
x2016_subset <- x2016 %>%
select(1:11,13,14,16:20,23:25,28:30,33:37,39:42,44:48,50:68,
70:78,80:89,91:101,103,106)
View(x2016_subset)
## step 2: clean up included variables to produce required common df structure:
# [1]id [2]year [3]age [4]gender [5]country
# [6]goes_trick_or_treating [7]candy_item [8]rating
x2016_subset_converted <- x2016_subset %>%
# make an id column to retain unique identifier for each person
mutate(id = c(1:nrow(x2016_subset)), .before = "Timestamp") %>%
# rename variables
rename(year = "Timestamp",
goes_trick_or_treating = "Are you going actually going trick or treating yourself?",
gender = "Your gender:",
age = "How old are you?",
country = "Which country do you live in?"
) %>% #,
# recode some specific age values before converting to numeric (see "Coerced age data" below)
#mutate(age = case_when(
# id == 378 ~ "value",
#  .default = age)) %>%
# change format of age and year data
mutate(age = as.integer(age), # Note: this introduces NAs by coercion
year = as.numeric(format(year, "%Y"))) %>%
#  filter(!id == value) # remove 1 duplicate
# expect dim: XX observations x XX variables
# cols 1:n are rater_info, n2-end are candy items
## step 2: clean up included variables to produce required common df structure:
# [1]id [2]year [3]age [4]gender [5]country
# [6]goes_trick_or_treating [7]candy_item [8]rating
x2016_subset_converted <- x2016_subset %>%
# make an id column to retain unique identifier for each person
mutate(id = c(1:nrow(x2016_subset)), .before = "Timestamp") %>%
# rename variables
rename(year = "Timestamp",
goes_trick_or_treating = "Are you going actually going trick or treating yourself?",
gender = "Your gender:",
age = "How old are you?",
country = "Which country do you live in?"
) %>% #,
# recode some specific age values before converting to numeric (see "Coerced age data" below)
#mutate(age = case_when(
# id == 378 ~ "value",
#  .default = age)) %>%
# change format of age and year data
mutate(age = as.integer(age), # Note: this introduces NAs by coercion
year = as.numeric(format(year, "%Y")))
#  filter(!id == value) # remove 1 duplicate
# expect dim: XX observations x XX variables
# cols 1:n are rater_info, n2-end are candy items
x2016_subset_converted
x2016_subset %>%
mutate(id = c(1:nrow(x2016_subset)), .before = "Timestamp") %>%
rename(age_raw = "How old are you?") %>%
mutate(age = as.integer(age_raw)) %>%
filter(is.na(age))
x2016_subset %>%
mutate(id = c(1:nrow(x2016_subset)), .before = "Timestamp") %>%
rename(age_raw = "How old are you?") %>%
mutate(age = as.integer(age_raw)) %>%
filter(is.na(age)) %>%
select(id, age_raw, age)
View(x2016_subset)
## step 2: clean up included variables to produce required common df structure:
# [1]id [2]year [3]age [4]gender [5]country
# [6]goes_trick_or_treating [7]candy_item [8]rating
x2016_subset_converted <- x2016_subset %>%
# make an id column to retain unique identifier for each person
mutate(id = c(1:nrow(x2016_subset)), .before = "Timestamp") %>%
# rename variables
rename(year = "Timestamp",
goes_trick_or_treating = "Are you going actually going trick or treating yourself?",
gender = "Your gender:",
age = "How old are you?",
country = "Which country do you live in?"
) %>%
# change format of age and year data
mutate(age = as.integer(age), # Note: this introduces NAs by coercion
year = as.numeric(format(year, "%Y")))
# expect dim: XX observations x XX variables
# cols 1:n are rater_info, n2-end are candy items
head(x2016_subset_converted, n = 15)
dim(x2016_subset_converted)
head(x2016_subset_converted, n = 15)
# inspect converted df
dim(x2016_subset_converted) # 1259 obs. x 90 var. 1 more col than subset: + id
head(x2016_subset_converted, n = 15)
# inspect converted df
dim(x2016_subset_converted) # 1259 obs. x 90 var. 1 more col than subset: + id
head(x2016_subset_converted)
1259*84
x2016_tidy <- x2016_subset_converted %>%
pivot_longer(cols = -c(year, id, age, gender, country, goes_trick_or_treating),
names_to = "candy_item",
values_to = "rating")
dim(x2016_tidy)
write_csv(x2016_subset_converted, "clean_data/2016_clean_wide.csv")
write_csv(x2016_tidy, "clean_data/2016_clean_long.csv")
write_csv(x2015_subset_converted, "clean_data/2015_clean_wide.csv")
write_csv(x2015_tidy, "clean_data/2015_clean_long.csv")
tidy_2015 <- read_csv(here("clean_data/2015_clean_long.csv"))
head(tidy_2015)
