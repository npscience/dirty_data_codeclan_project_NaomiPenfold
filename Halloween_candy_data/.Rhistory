mutate(candy_item = case_when(
candy_item %in% c("Anonymous brown globs that come in black and orange wrappers", "Anonymous brown globs that come in black and orange wrappers\t(a.k.a. Mary Janes)") ~ "Mary Janes",
candy_item == "Bonkers" ~ "Bonkers (the candy)",
candy_item == "Box’o’ Raisins" ~ "Box'o'Raisins",
candy_item == "JoyJoy (Mit Iodine!)" ~ "JoyJoy (Mit Iodine)",
candy_item == "Sweetums (a friend to diabetes)" ~ "Sweetums",
candy_item == "Tolberone something or other" ~ "Toblerone",
.default = candy_item)) %>%
# make new column with candy item by type (to collapse variants of same candy)
mutate(candy_item_type = case_when(
str_detect(.$candy_item, "marties") ~ "Smarties",
str_detect(.$candy_item, "M\\&M") ~ "M&Ms",
str_detect(.$candy_item, "Licorice") ~ "Licorice",
str_detect(.$candy_item, "Jolly Rancher") ~ "Jolly Rancher",
.default = candy_item
)) %>%
# clean country columns
mutate(country = str_to_upper(country)) %>%
mutate(country = if_else(country == "NOT THE USA OR CANADA", NA_character_, country)) %>%
mutate(country = case_when(country %in% USAs ~ "USA", .default = country)) %>%
mutate(country = case_when(
str_detect(.$country, "^UNITED") ~ "UK",
str_detect(.$country, "UK|U\\.K\\.|ENGLAND|ENDLAND") ~ "UK",
str_detect(.$country, "\\`$") ~ "CANADA",
str_detect(.$country, "CAN$") ~ "CANADA",
str_detect(.$country, "THE\\ NETHERLANDS") ~ "NETHERLANDS",
str_detect(.$country, "^ESPA") ~ "SPAIN",
str_detect(.$country, "CASCADIA") ~ "CASCADIA",
str_detect(.$country, "^[0-9]+") ~ NA_character_,
str_detect(.$country, "\\ ONE|UD|SUBSCRIBE|CANUCK|SOMEWHERE|\\ ABOVE|NEVERLAND|NARNIA") ~ NA_character_,
str_detect(.$country, "INSANITY|ANYMORE|GOD|FEAR|EUA|EARTH|DENIAL|CANAE|ATLANTIS|TROPICAL") ~ NA_character_,
str_detect(.$country, "^A$") ~ NA_character_,
.default = country)) %>%
# create new column with type of country (for analysis Q8)
mutate(country_type = case_when(
!(country %in% c("UK","USA","CANADA", NA_character_)) ~ "Other",
country == "CANADA" ~ "Canada",
.default = country))
# Write cleaned data to new csv to load into analysis
write_csv(candy_ratings_allyears_clean, "clean_data/candy_ratings_allyears_clean.csv")
library(tidyverse)
library(readxl)
library(here)
excel_sheets(here("raw_data/boing-boing-candy-2015.xlsx"))
excel_sheets(here("raw_data/boing-boing-candy-2016.xlsx"))
excel_sheets(here("raw_data/boing-boing-candy-2017.xlsx"))
x2015 <- read_excel(here("raw_data/boing-boing-candy-2015.xlsx"), sheet = "Form Responses 1")
x2016 <- read_excel(here("raw_data/boing-boing-candy-2016.xlsx"), sheet = "Form Responses 1")
x2017 <- read_excel(here("raw_data/boing-boing-candy-2017.xlsx"), sheet = "responses (2) (1).csv")
# a tidier version of this code chunk is in cleaning.R script
# keep wanted columns, and put 98-99 (additional ratings) at end
x2015_subset <- x2015 %>%
select(1:17,19:22,24,25,29:32,35:37,39:40,42:44,46:55,57:81,83:89,91,92,96,114,115,98,99)
# tidy column names and some data
x2015_subset_converted_all <- x2015_subset %>%
# make an id column to retain unique identifier for each person
mutate(id = c(1:5630), .before = "Timestamp") %>%
# rename variables about the rater & rating year
rename(age = "How old are you?",
goes_trick_or_treating = "Are you going actually going trick or treating yourself?",
year = "Timestamp",
additional_joy = "Please list any items not included above that give you JOY.",
additional_despair = "Please list any items not included above that give you DESPAIR.") %>%
# recode some specific age values before converting to numeric (see "Coerced age data" below)
mutate(age = case_when(
id == 378 ~ "45",
id == 792 ~ "37",
id == 1210 ~ "43",
id == 1571 ~ "46",
id == 1629 ~ "40",
id == 2207 ~ "37",
id == 2934 ~ "50",
id == 3384 ~ "27",
id == 3626 ~ "50",
id == 4798 ~ "42",
id == 5624 ~ "50",
.default = age)) %>%
mutate(age = as.integer(age),  # Note: this introduces NAs by coercion
year = as.numeric(format(year, "%Y"))) %>%
# make empty columns for gender and country (missing in this year's dataset)
mutate(gender = rep(NA_character_, nrow(x2015_subset)), .after = age) %>%
mutate(country = rep(NA_character_, nrow(x2015_subset)), .after = gender) %>%
# reformat id as YYYYxxxx to make unique when years combined
mutate(id = (year*10000)+id, .before = year) %>%
filter(!id == 20151573) # remove 1 duplicate (found via 'coerced age data')
# Proceed without these additional joy/despair ratings:
x2015_subset_converted_sub <- x2015_subset_converted_all %>%
select(-c(additional_joy,additional_despair))
# 'tidy' subsetted data to long format with
# one column for candy items [7-85], one column for rating
# expect 5629 x 85 to become
#   (5629 raters * 79 items) x 8 = 444,691 x 8
x2015_tidy <- x2015_subset_converted_sub %>%
pivot_longer(cols = -c(year, id, age, gender, country, goes_trick_or_treating),
names_to = "candy_item",
values_to = "rating")
# this code relies on output generated in earlier chunks: `x2015_subset_converted_sub` and `x2015`
# check for NAs in converted age column
x2015_id_na_age <- x2015_subset_converted_sub %>%
filter(is.na(age)) %>% # 285 rows
# make vector of IDs to filter for to inspect raw data (with IDs)
select(id) %>%
pull()
x2015_id_age_raw <- x2015 %>%
# add ids to raw data
mutate(id = c(1:5630), .before = Timestamp) %>%
rename(age_raw = "How old are you?") %>%
# filter for ids with NA in converted age
filter(id %in% x2015_id_na_age) %>%
select(id, age_raw) %>% # several NAs, filter out
filter(!is.na(age_raw)) # 85 rows
# recode these ages - reuse this code in cleaning script (as above)
x2015_id_age_raw %>%
mutate(age = case_when(
id == 378 ~ "45",
id == 792 ~ "37",
id == 1210 ~ "43",
id == 1571 ~ "46",
id == 1629 ~ "40",
id == 2207 ~ "37",
id == 2934 ~ "50",
id == 3384 ~ "27",
id == 3626 ~ "50",
id == 4798 ~ "42",
id == 5624 ~ "50",
.default = age_raw
)) %>%
mutate(age_num = as.integer(age)) %>%
group_by(age_num) %>%
summarise(count = n()) # recoded 11 values, 74 NAs remaining
# Create separate table for additional items rated as JOY or DESPAIR with person id
x2015_additional_ratings <- x2015_subset_converted_all %>%
select(id, additional_joy, additional_despair)
head(x2015_additional_ratings, n=10)
# see list of additional candy items rated JOY
x2015_additional_joy <- x2015_additional_ratings %>%
filter(!is.na(additional_joy)) %>%
select(id, additional_joy) #2436 rows
# see list of additional candy items rated DESPAIR
x2015_additional_despair <- x2015_additional_ratings %>%
filter(!is.na(additional_despair)) %>%
select(id, additional_despair) #1775 rows
# this code chunk is in cleaning.R script
## step 1: subset to remove unwanted columns
x2016_subset <- x2016 %>%
select(1:5,7:11,13,14,16:20,23:25,28:30,33:37,39:42,44:48,50:68,
70:78,80:89,91:101,103,106)
# not yet including 107:109 for additional ratings and comments
# 1259 obs x 89 var
x2016_subset %>%
mutate(id = c(1:nrow(x2016_subset)), .before = "Timestamp") %>%
rename(age_raw = "How old are you?") %>%
mutate(age = as.integer(age_raw)) %>%
filter(is.na(age)) %>%
select(id, age_raw, age)
# this code chunk is in cleaning.R script
## step 2: clean up included variables to produce required common df structure:
# [1]id [2]year [3]age [4]gender [5]country
# [6]goes_trick_or_treating [7]candy_item [8]rating
x2016_subset_converted <- x2016_subset %>%
# make an id column to retain unique identifier for each person
mutate(id = c(1:nrow(x2016_subset)), .before = "Timestamp") %>%
# rename variables
rename(year = "Timestamp",
goes_trick_or_treating = "Are you going actually going trick or treating yourself?",
gender = "Your gender:",
age = "How old are you?",
country = "Which country do you live in?"
) %>%
# change format of age and year data
mutate(age = as.integer(age), # Note: this introduces NAs by coercion
year = as.numeric(format(year, "%Y")))
# this code chunk is in cleaning.R script
## step 3: make long format tidy data
# with one column for candy items 7:90, one column for rating
# expect 1259 x 90 df to become
# (1259 raters * 84 items) x 8 = 105,756 x 8
x2016_tidy <- x2016_subset_converted %>%
pivot_longer(cols = -c(year, id, age, gender, country, goes_trick_or_treating),
names_to = "candy_item",
values_to = "rating")
# this code chunk is in cleaning.R script
## step 1: subset to remove unwanted columns
x2017_subset <- x2017 %>%
select(1:5,7:11,13,14,16:20,23:25,28:30,33:37,39:42,44:48,50:68,
71:80,82:85,87:91,93:101,103,104,106,109)
# not yet including 110:112 for additional ratings and comments
# outputs 2460 obs x 88 var
x2017_subset %>%
rename(age_raw = "Q3: AGE") %>%
select(age_raw) %>%
mutate(age = as.integer(age_raw)) %>%
summarise(across(.cols = c(age, age_raw),
.fns = ~ sum(is.na(.x))))
# Find coerced NAs in age(int)
x2017_subset %>%
rename(age_raw = "Q3: AGE") %>%
select(`Internal ID`, age_raw) %>%
mutate(age = as.integer(age_raw)) %>%
filter(!is.na(age_raw)) %>%
filter(is.na(age))
# this code chunk is in cleaning.R script
## step 2: clean up included variables to produce required common df structure:
# [1]id [2]year [3]age [4]gender [5]country
# [6]goes_trick_or_treating [7]candy_item [8]rating
x2017_subset_converted <- x2017_subset %>%
# rename variables
rename(goes_trick_or_treating = "Q1: GOING OUT?",
gender = "Q2: GENDER",
age = "Q3: AGE",
country = "Q4: COUNTRY") %>%
# recode some specific age values before converting to numeric (see above)
mutate(age = case_when(
`Internal ID` == 90280448 ~ "69",
`Internal ID` == 90280466 ~ "46",
`Internal ID` == 90292907 ~ "58",
.default = age)) %>%
# change format of age data
mutate(age = as.integer(age)) %>% # Note: this introduces NAs by coercion
# add a year column
mutate(year = rep(2017, nrow(x2017_subset)), .before = goes_trick_or_treating) %>%
# make an id column to retain unique identifier for each person
mutate(id = c(1:nrow(x2017_subset)), .before = year) %>%
mutate(id = (year*10000)+id, .before = year) %>%
# remove original id column
select(-c(`Internal ID`))
# outputs df: 2460 obs. x 89 var (1 more col than subset: id)
# this code chunk is in cleaning.R script
## step 3: make long format tidy data
# with one column for candy items, one column for rating
# expect 2460 x 89 df to become
# (2460 raters * 83 items) x 8 = 204,180 x 8
x2017_tidy <- x2017_subset_converted %>%
pivot_longer(cols = -c(year, id, age, gender, country, goes_trick_or_treating),
names_to = "candy_item",
values_to = "rating")
# Dim to expect:
# sum(nrow(x2015_tidy),nrow(x2016_tidy),nrow(x2017_tidy)) # 753,368 rows x 8 cols
# Bind rows -- this line is in cleaning.R script
candy_ratings_allyears <- bind_rows(x2015_tidy, x2016_tidy, x2017_tidy)
# Dim (actual): 753,368 rows x 8 cols
candy_ratings <- read_csv("../clean_data/candy_ratings_allyears.csv")
candy_raters <- candy_ratings %>%
select(id,year,age,gender,country,goes_trick_or_treating) %>%
unique()
# dim(candy_raters) # 9348 raters
# check for standard NAs in raters information
candy_raters %>%
summarise(across(.cols = everything(),
.fns = ~ sum(is.na(.x))))
# check for standard NAs in ratings information
candy_ratings %>%
select(candy_item, rating) %>%
summarise(across(.cols = everything(),
.fns = ~ sum(is.na(.x))))
# check low ages
candy_raters %>%
filter(!is.na(age)) %>%
filter(age <= 6) %>%
arrange(age)
# check higher ages
candy_raters %>%
filter(!is.na(age)) %>%
filter(age > 99) %>%
arrange(age)
# 21 raters with age 100+
candy_raters %>%
group_by(gender) %>%
summarise(count = n())
candy_raters %>%
group_by(goes_trick_or_treating) %>%
summarise(count = n())
# inspect candy_items (cleaning steps below)
candy_ratings %>%
group_by(candy_item) %>%
summarise(count = n())
# start: 182 distinct items
# this code chunk is included in cleaning.R script
# make temp df to check cleaning progress
candy_ratings_after_item_cleaning <- candy_ratings  %>%
# remove unwanted strings to standardise candy items
mutate(candy_item = str_replace_all(candy_item, "^Q6\\ \\|\\ ", ""),
candy_item = str_replace_all(candy_item, "^\\[", ""),
candy_item = str_replace_all(candy_item, "\\]$", "")) %>%
# recode Mary Janes == anonymous brown globs
mutate(candy_item = case_when(
candy_item %in% c("Anonymous brown globs that come in black and orange wrappers", "Anonymous brown globs that come in black and orange wrappers\t(a.k.a. Mary Janes)") ~ "Mary Janes",
candy_item == "Bonkers" ~ "Bonkers (the candy)",
candy_item == "Box’o’ Raisins" ~ "Box'o'Raisins",
candy_item == "JoyJoy (Mit Iodine!)" ~ "JoyJoy (Mit Iodine)",
candy_item == "Sweetums (a friend to diabetes)" ~ "Sweetums",
candy_item == "Tolberone something or other" ~ "Toblerone",
.default = candy_item)) %>%
# make new column with candy item by type (to collapse variants of same candy)
mutate(candy_item_type = case_when(
str_detect(.$candy_item, "marties") ~ "Smarties",
str_detect(.$candy_item, "M\\&M") ~ "M&Ms",
str_detect(.$candy_item, "Licorice") ~ "Licorice",
str_detect(.$candy_item, "Jolly Rancher") ~ "Jolly Rancher",
.default = candy_item
))
# re-inspect candy_item after cleaning
candy_ratings_after_item_cleaning %>%
group_by(candy_item) %>%
summarise(count = n())
# inspect candy_item_type produced in cleaning
candy_ratings_after_item_cleaning %>%
group_by(candy_item_type) %>%
summarise(count = n())
candy_ratings %>%
group_by(rating) %>%
summarise(count = n())
# countries before cleaning
candy_raters %>%
filter(!is.na(country)) %>%
distinct(country)
# starts with 168 distinct values
# Note: this code chunk is part of the cleaning.R script
# make vector of all misstypings of USA
USAs <- candy_raters %>%
mutate(country = str_to_upper(country)) %>%
filter(!is.na(country)) %>%
distinct(country) %>%
arrange(desc(country)) %>%
# enter TRUE if country may be USA
mutate(USA = str_detect(.$country, "^U") | str_detect(.$country, "^THE") | str_detect(.$country, "STAT|USA|TRUMPISTAN|AAAYYYYYY|MERICA|AMERC|MUR|YORK|JERSEY|PITTSBURGH|CAROLINA|CALIFORNIA|ALASKA")) %>%
filter(USA == TRUE) %>%
# filter out non-USA entries (assume unhinged states is USA)
mutate(USA = !(str_detect(.$country, "^NOT") | str_detect(.$country, "N\\.|KIN|UK|UD|UAE|U.K.|OLD|CASCADIA|NETHERLANDS"))) %>%
filter(USA == TRUE) %>%
select(country) %>%
pull() # 55 values
# clean country column
candy_raters_after_country_cleaning <- candy_raters %>%
mutate(country = str_to_upper(country)) %>%
mutate(country = if_else(country == "NOT THE USA OR CANADA", NA_character_, country)) %>%
mutate(country = case_when(country %in% USAs ~ "USA", .default = country)) %>%
mutate(country = case_when(
str_detect(.$country, "^UNITED") ~ "UK",
str_detect(.$country, "UK|U\\.K\\.|ENGLAND|ENDLAND") ~ "UK",
str_detect(.$country, "\\`$") ~ "CANADA",
str_detect(.$country, "CAN$") ~ "CANADA",
str_detect(.$country, "THE\\ NETHERLANDS") ~ "NETHERLANDS",
str_detect(.$country, "^ESPA") ~ "SPAIN",
str_detect(.$country, "CASCADIA") ~ "CASCADIA",
str_detect(.$country, "^[0-9]+") ~ NA_character_,
str_detect(.$country, "\\ ONE|UD|SUBSCRIBE|CANUCK|SOMEWHERE|\\ ABOVE|NEVERLAND|NARNIA") ~ NA_character_,
str_detect(.$country, "INSANITY|ANYMORE|GOD|FEAR|EUA|EARTH|DENIAL|CANAE|ATLANTIS|TROPICAL") ~ NA_character_,
str_detect(.$country, "^A$") ~ NA_character_,
.default = country)) %>%
mutate(country_type = case_when(
!(country %in% c("UK","US","CANADA", NA_character_)) ~ "Other",
country == "CANADA" ~ "Canada", # for aesthetics
.default = country))
# re-inspect countries after cleaning
candy_raters_after_country_cleaning %>%
distinct(country, country_type)
# read in file written after cleaning as df to analyse for individual ratings
candy_ratings_analysis <- read_csv("../clean_data/candy_ratings_allyears_clean.csv")
# subset df to analyse info about individual raters
candy_raters_analysis <- candy_ratings_analysis %>%
select(id,year,age,gender,country,goes_trick_or_treating) %>%
unique()
candy_ratings_analysis %>%
filter(!is.na(rating)) %>%
nrow()
candy_raters_analysis %>%
filter(!is.na(age)) %>%  # 8,902 raters provided age data
filter(age > 0 & age <= 125) %>%  # of which, 8,889 were within reasonable age range (1-125 years)
group_by(goes_trick_or_treating) %>%
summarise(count = n(),
avg_age = mean(age))
# looking by individual candy_items
candy_ratings_analysis %>%
group_by(candy_item, rating) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
ungroup() %>%
group_by(rating) %>%
slice(1) %>%
arrange(desc(count))
# most JOY rated candy items
candy_ratings_analysis %>%
select(candy_item, rating) %>%
filter(rating == "JOY") %>%
group_by(candy_item) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(5)
# most MEH rated candy items
candy_ratings_analysis %>%
select(candy_item, rating) %>%
filter(rating == "MEH") %>%
group_by(candy_item) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(5)
# looking by candy_item_type
candy_ratings_analysis %>%
group_by(candy_item_type, rating) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
ungroup() %>%
group_by(rating) %>%
slice(1) %>%
arrange(desc(count))
candy_ratings_analysis %>%
filter(candy_item == "Starburst" & rating == "DESPAIR") %>%
summarise(count = n()) %>%
pull()
# first make a numeric rating value column to use
candy_ratings_analysis_num <- candy_ratings_analysis %>%
mutate(rating_num = case_when(
rating == "JOY" ~ 1,
rating == "MEH" ~ 0,
rating == "DESPAIR" ~ -1,
.default = NA
))
# 753,368 obs x 10 var == same dim as candy_ratings_analysis
candy_ratings_analysis_num %>%
group_by(gender, candy_item) %>%
summarise(popularity = mean(rating_num, na.rm = TRUE)) %>%
arrange(desc(popularity)) %>%
ungroup() %>%
group_by(gender) %>%
slice(1) %>%
ungroup()
# filter out non-specific candy bar:
candy_ratings_analysis_num %>%
filter(candy_item != "Any full-sized candy bar") %>%
group_by(gender, candy_item) %>%
summarise(popularity = mean(rating_num, na.rm = TRUE)) %>%
arrange(desc(popularity)) %>%
ungroup() %>%
group_by(gender) %>%
slice(1) %>%
ungroup()
candy_ratings_analysis_num %>%
group_by(year, candy_item) %>%
summarise(popularity = mean(rating_num, na.rm = TRUE)) %>%
arrange(desc(popularity)) %>%
ungroup() %>%
group_by(year) %>%
slice(1) %>%
ungroup()
# filter out non-specific candy bar:
candy_ratings_analysis_num %>%
filter(candy_item != "Any full-sized candy bar") %>%
group_by(year, candy_item) %>%
summarise(popularity = mean(rating_num, na.rm = TRUE)) %>%
arrange(desc(popularity)) %>%
ungroup() %>%
group_by(year) %>%
slice(1) %>%
ungroup()
candy_ratings_analysis_num %>%
group_by(country_type, candy_item_type) %>%
summarise(popularity = mean(rating_num, na.rm = TRUE)) %>%
arrange(desc(popularity)) %>%
ungroup() %>%
group_by(country_type) %>%
slice(1) %>%
ungroup()
# Find the most popular candy item after "any full-sized candy bar"
candy_ratings_analysis_num %>%
filter(candy_item_type != "Any full-sized candy bar") %>%
group_by(country_type, candy_item_type) %>%
summarise(popularity = mean(rating_num, na.rm = TRUE)) %>%
arrange(desc(popularity)) %>%
ungroup() %>%
group_by(country_type) %>%
slice(1) %>%
ungroup()
# create vector of candy item names to include in final data, based on those included currently
candy_items <- candy_ratings_analysis %>%
select(candy_item) %>%
unique() %>%
pull()
candy_ratings_analysis <- read_csv("../clean_data/candy_ratings_allyears_clean.csv")
library(tidyverse)
candy_ratings_analysis <- read_csv("../clean_data/candy_ratings_allyears_clean.csv")
candy_ratings_analysis %>%
filter(year == 2015)
candy_ratings_analysis %>%
filter(year == 2015) %>%
filter(rating == "MEH")
candy_ratings_analysis %>%
group_by(rating, year) %>%
summarise(count = n())
candy_ratings_analysis %>%
group_by(candy_item, rating) %>%
summarise(count = n()) %>%
arrange(desc(count))
# looking by individual candy_items
candy_ratings_analysis %>%
group_by(candy_item, rating) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
ungroup() %>%
group_by(rating) %>%
slice(2) %>%
arrange(desc(count))
# looking by individual candy_items
candy_ratings_analysis %>%
group_by(candy_item, rating) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
ungroup() %>%
group_by(rating) %>%
slice(1) %>%
arrange(desc(count))
x2015_additional_joy
